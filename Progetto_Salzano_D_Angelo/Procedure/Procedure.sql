--Procedura che aggiorna di una percentuale il prezzo di un paio di scarpe, dopo un anno 
--dal rilascio(data di pubblicazione) sul sito 

CREATE OR REPLACE PROCEDURE AUMENTO_PREZZO_SCARPE
(DATA_PUB PRODOTTO.DATA_PUBBLICAZIONE%TYPE ,ID_PR PRODOTTO.ID_PRODOTTO%TYPE,PERCENTUALE NUMBER DEFAULT 1) 
IS
INVALID_PREZZO EXCEPTION;
NEW_PRICE_SCARPE SCARPE.PREZZO_SCARPE%TYPE;
DATA_SCARPE PRODOTTO.DATA_PUBBLICAZIONE%TYPE;

BEGIN 
--AGGIORNAMENTO PREZZO SCARPE
SELECT SCARPE.PREZZO_SCARPE, PRODOTTO.DATA_PUBBLICAZIONE INTO NEW_PRICE_SCARPE, DATA_SCARPE
FROM SCARPE 
JOIN PRODOTTO ON SCARPE.ID_PRODOTTO = PRODOTTO.ID_PRODOTTO
WHERE PRODOTTO.DATA_PUBBLICAZIONE = DATA_PUB AND PRODOTTO.ID_PRODOTTO = ID_PR;

IF((SYSDATE-DATA_PUB)>=365) THEN
UPDATE SCARPE
SET SCARPE.PREZZO_SCARPE = SCARPE.PREZZO_SCARPE * PERCENTUALE;
COMMIT;
DBMS_OUTPUT.PUT_LINE('PREZZO SCARPE AGGIORNATO');
END IF;

IF((SYSDATE-DATA_PUB)<365) THEN
DBMS_OUTPUT.PUT_LINE('PREZZO SCARPE NON AGGIORNATO POICHE NON TRASCORSI 365 GIORNI');
ROLLBACK;
END IF;


--GESTIONE DELLE ECCEZIONI 
EXCEPTION
WHEN INVALID_PREZZO THEN
RAISE_APPLICATION_ERROR(-20008,'PREZZO ERRATO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NESSUN PRODOTTO PUBBLICATO IN QUELLA DATA');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'ULTERIORE PREZZO DA AGGIUNGERE');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;

----------------------------------------------------------------------------------------

--Procedura che aggiorna di una percentuale il prezzo di un capo, dopo un anno 
--dal rilascio(data di pubblicazione) sul sito 

CREATE OR REPLACE PROCEDURE AUMENTO_PREZZO_CAPI
(DATA_PUB PRODOTTO.DATA_PUBBLICAZIONE%TYPE ,ID_PR PRODOTTO.ID_PRODOTTO%TYPE,PERCENTUALE NUMBER DEFAULT 1) 
IS
INVALID_PREZZO EXCEPTION;
NEW_PRICE_CAPI CAPI_HYPE.PREZZO_CAPO%TYPE;
DATA_CAPI PRODOTTO.DATA_PUBBLICAZIONE%TYPE;

BEGIN 
--AGGIORNAMENTO PREZZO CAPI
SELECT CAPI_HYPE.PREZZO_CAPO, PRODOTTO.DATA_PUBBLICAZIONE INTO NEW_PRICE_CAPI, DATA_CAPI
FROM CAPI_HYPE 
JOIN PRODOTTO ON CAPI_HYPE.ID_PRODOTTO = PRODOTTO.ID_PRODOTTO
WHERE PRODOTTO.DATA_PUBBLICAZIONE = DATA_PUB AND PRODOTTO.ID_PRODOTTO = ID_PR;

IF((SYSDATE-DATA_PUB)>=365) THEN
UPDATE CAPI_HYPE
SET CAPI_HYPE.PREZZO_CAPO = CAPI_HYPE.PREZZO_CAPO * PERCENTUALE;
COMMIT;
DBMS_OUTPUT.PUT_LINE('PREZZO CAPI_HYPE AGGIORNATO');
END IF;

IF((SYSDATE-DATA_PUB)<365) THEN
DBMS_OUTPUT.PUT_LINE('PREZZO CAPI_HYPE NON AGGIORNATO POICHE NON TRASCORSI 365 GIORNI');
ROLLBACK;
END IF;

EXCEPTION
WHEN INVALID_PREZZO THEN
RAISE_APPLICATION_ERROR(-20008,'PREZZO ERRATO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NESSUN PRODOTTO PUBBLICATO IN QUELLA DATA');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'ULTERIORE PREZZO DA AGGIUNGERE');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;

----------------------------------------------------------------------------------------

--Dopo 36 mesi l’abbonamento free si rinnova automaticamente (1095 GIORNI)

CREATE OR REPLACE PROCEDURE RINNOVO_FREE
(DATA_FINE EFFETTUA.DATA_FINE_ABB%TYPE, NOME_ABB EFFETTUA.NOME_ABBONAMENTO%TYPE)
IS
NEW_DATA_FINE EFFETTUA.DATA_FINE_ABB%TYPE;
NEW_NOME_ABB EFFETTUA.NOME_ABBONAMENTO%TYPE;
INVALID_NOME EXCEPTION;

BEGIN
SELECT EFFETTUA.DATA_FINE_ABB, EFFETTUA.NOME_ABBONAMENTO INTO NEW_DATA_FINE, NEW_NOME_ABB
FROM EFFETTUA
WHERE EFFETTUA.DATA_FINE_ABB = DATA_FINE AND 
EFFETTUA.NOME_ABBONAMENTO = NOME_ABB;


--RINNOVO LA DATA FINE DELL'ABBONAMENTO FREE,INCREMENTANDO LA DATA FINE DI 1095 GIORNI (3 ANNI)
IF(NOME_ABB = 'FREE' AND DATA_FINE <= SYSDATE) THEN
UPDATE EFFETTUA
SET EFFETTUA.DATA_FINE_ABB = EFFETTUA.DATA_FINE_ABB + 1095;
COMMIT;
DBMS_OUTPUT.PUT_LINE('RINNOVO AUTOMATICO DI ABBONAMENTO FREE EFFETTUATO.');
END IF;

IF(DATA_FINE != SYSDATE)THEN
DBMS_OUTPUT.PUT_LINE('RINNOVO DI ABBONAMENTO FREE NON EFFETTUATO POICHE GIA PRESENTE UNO VALIDO.');
END IF;
IF(NOME_ABB != 'FREE') THEN
ROLLBACK;
END IF;


--GESTIONE DELLE ECCEZIONI
EXCEPTION
WHEN INVALID_NOME THEN
RAISE_APPLICATION_ERROR(-20008,'NOME ABBONAMENTO ERRATO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NESSUN ABBONAMENTO TROVATO');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'ULTERIORE ABBONAMENTO DA AGGIUNGERE');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;

----------------------------------------------------------------------------------------

--Calcola il prezzo finale di una scarpa sommando taglia e prezzo 

CREATE OR REPLACE PROCEDURE PREZZO_FINALE_SCARPE
(PREZZO_SCARPE_BASE SCARPE.PREZZO_SCARPE%TYPE, PREZZO_T TAGLIA_SCARPE.PREZZO_TAGLIA%TYPE)
IS
P_TAGLIA TAGLIA_SCARPE.PREZZO_TAGLIA%TYPE;
P_SCARPE_BASE SCARPE.PREZZO_SCARPE%TYPE;
INVALID_COST EXCEPTION;

BEGIN
SELECT SCARPE.PREZZO_SCARPE, TAGLIA_SCARPE.PREZZO_TAGLIA INTO P_SCARPE_BASE, P_TAGLIA
FROM (SCARPE JOIN SUDDIVISE_IN ON SCARPE.ID_PRODOTTO = SUDDIVISE_IN.ID_PRODOTTO) 
JOIN TAGLIA_SCARPE ON TAGLIA_SCARPE.NUMERO_TAGLIA = SUDDIVISE_IN.NUMERO_TAGLIA
WHERE TAGLIA_SCARPE.PREZZO_TAGLIA = PREZZO_T AND SCARPE.PREZZO_SCARPE = PREZZO_SCARPE_BASE;


--AGGIORNIAMO IL PREZZO DELLE SCARPE AGGIUNGENDO IL PREZZO DELLA TAGLIA
IF (PREZZO_SCARPE_BASE > 0 AND PREZZO_T > 0) THEN
UPDATE SCARPE
SET SCARPE.PREZZO_SCARPE = SCARPE.PREZZO_SCARPE + P_TAGLIA
--ENTRAMBI I PREZZI DEVONO OVVIAMENTE ESSERE MAGGIORI DI 0
--AFFINCHE' AVVENGA UNA VARIAZIONE DEL PREZZO
WHERE SCARPE.PREZZO_SCARPE = PREZZO_SCARPE_BASE;
COMMIT;
DBMS_OUTPUT.PUT_LINE('PREZZO SCARPA AGGIORNATO.');
END IF;

IF (PREZZO_SCARPE_BASE <= 0 AND PREZZO_T <= 0) THEN 
ROLLBACK;
END IF;


--GESTIONE DELLE ECCEZIONI
EXCEPTION
WHEN INVALID_COST THEN
RAISE_APPLICATION_ERROR(-20008,'PREZZO INSERITO NON VALIDO ');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NUOVO PREZZO TROVATO');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'TROPPE RIGHE IN INPUT');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;

----------------------------------------------------------------------------------------

--Procedura che elimina i dati di un fornitore, tranne quello dell'azienda, se il fornitore
--non effettua consegne da 90 giorni o più

CREATE OR REPLACE PROCEDURE GESTIONE_FORNITORE
(NOME_F FORNITORE.NOME_FORNITORE%TYPE, COGNOME_F FORNITORE.COGNOME_FORNITORE%TYPE, DT_ULTIMA_FORNT FORNITURA.DATA_FORNITURA%TYPE)
IS
DATA_FOR FORNITURA.DATA_FORNITURA%TYPE;
NOME_FRN FORNITORE.NOME_FORNITORE%TYPE;
COGNOME_FRN FORNITORE.COGNOME_FORNITORE%TYPE;
AZ_FORNITORE FORNITORE.AZIENDA_FORNITORE%TYPE;
--GESTIONE DEGLI ERRORI SIA PER FORNITURA CHE PER FORNITORE(2 EXCEPTION)
INVALID_FORNITORE EXCEPTION;
INVALID_FORNITURA EXCEPTION;

BEGIN
SELECT DISTINCT FORNITORE.NOME_FORNITORE, FORNITORE.COGNOME_FORNITORE, FORNITURA.DATA_FORNITURA, FORNITORE.AZIENDA_FORNITORE
INTO NOME_FRN, COGNOME_FRN, DATA_FOR, AZ_FORNITORE
FROM FORNITORE JOIN FORNITURA ON FORNITORE.AZIENDA_FORNITORE = FORNITURA.AZIENDA_FORNITORE
WHERE FORNITORE.NOME_FORNITORE = NOME_F AND FORNITORE.COGNOME_FORNITORE = COGNOME_F 
AND FORNITURA.DATA_FORNITURA = DT_ULTIMA_FORNT;


--SE PASSANO PIU' DI 90 GIORNI DALL'ULTIMA CONSEGNA DEL FORNITORE 
--VENGONO CANCELLATI NOME,COGNOME E RECAPITO TELEFONICO DEL FORNITORE
IF (SYSDATE - DT_ULTIMA_FORNT) > 90
THEN
UPDATE FORNITORE 
--ELIMINIAMO NOME,COGNOME E RECAPITO TELEFONICO DEL FORNITORE LASCIANDO L'AZIENDA
--ESSENZIALE PER LE TABELLE COLLEGATE A FORNITORE. 
SET FORNITORE.NOME_FORNITORE = ' ',FORNITORE.COGNOME_FORNITORE = ' ', FORNITORE.RECAPITO_TEL = 0
WHERE FORNITORE.NOME_FORNITORE = NOME_F AND FORNITORE.COGNOME_FORNITORE = COGNOME_F;
COMMIT;
END IF;

IF((SYSDATE - DT_ULTIMA_FORNT) <= 90) THEN
ROLLBACK;
END IF;


--GESTIONE DELLE ECCEZIONI 
EXCEPTION
--GESTIONE ECCEZIONE FORNITORE
WHEN INVALID_FORNITORE THEN
RAISE_APPLICATION_ERROR(-20008,'FORNITORE INSERITO NON VALIDO ');
--GESTIONE ECCEZIONE FORNITURA
WHEN INVALID_FORNITURA THEN
RAISE_APPLICATION_ERROR(-20008,'FORNITURA INSERITA NON VALIDA ');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('IL FORNITORE INSERITO NON HA INVIATO UNA FORNITURA IN QUESTA DATA');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'ULTERIORE DATO DA AGGIUNGERE');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;

----------------------------------------------------------------------------------------

--Procedura che sottrae il valore dello sconto della promo dall'importo dell'acquisto

CREATE OR REPLACE PROCEDURE ACQUISTO_CON_SCONTO
(PREZZO_ACQUISTO ACQUISTO.IMPORTO_ACQUISTO%TYPE, SCONTO_APPLICATO PROMO.SCONTO%TYPE)
IS
SCONTO_EFFETTIVO PROMO.SCONTO%TYPE;
ACQUISTO_EFFETTIVO ACQUISTO.IMPORTO_ACQUISTO%TYPE;
INVALID_ACQ EXCEPTION;

BEGIN
SELECT PROMO.SCONTO, ACQUISTO.IMPORTO_ACQUISTO INTO SCONTO_EFFETTIVO, ACQUISTO_EFFETTIVO
FROM PROMO JOIN ACQUISTO ON PROMO.CODICE_PROMO = ACQUISTO.CODICE_PROMO
WHERE PROMO.SCONTO = SCONTO_APPLICATO AND ACQUISTO.IMPORTO_ACQUISTO = PREZZO_ACQUISTO;

IF (ACQUISTO_EFFETTIVO > 0 AND SCONTO_EFFETTIVO > 0) THEN
UPDATE ACQUISTO
SET ACQUISTO.IMPORTO_ACQUISTO = ACQUISTO.IMPORTO_ACQUISTO - SCONTO_EFFETTIVO
--AFFINCHE' SIA COERENTE TALE PROCEDURA L'IMPORTO DELL'ACQUISTO E LO SCONTO_EFFETTIVO DEVONO RISULTARE 
--MAGGIORI DI 0
WHERE ACQUISTO.IMPORTO_ACQUISTO = PREZZO_ACQUISTO;
COMMIT;
DBMS_OUTPUT.PUT_LINE('VALORE SCONTO SOTTRATTO ALL IMPORTO ACQUISTO');
END IF;

IF (ACQUISTO_EFFETTIVO <= 0 AND SCONTO_EFFETTIVO <= 0) THEN
ROLLBACK;
END IF;

EXCEPTION
--GESTIONE ERRORE ACQUISTO (se non inserito precedentemente)
WHEN INVALID_ACQ THEN
RAISE_APPLICATION_ERROR(-20008,'ACQUISTO INSERITO NON VALIDO ');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NESSUN ACQUISTO TROVATO');
WHEN TOO_MANY_ROWS THEN
RAISE_APPLICATION_ERROR(-20008,'ULTERIORE ACQUISTO DA AGGIUNGERE');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20008,'PROBLEMA RISCONTRATO');
END;



